[mcu buffer_mcu]
canbus_uuid: 704fe1305bd6

[gcode_macro variables]
variable_stop_feeding: False
gcode:

#[buffer_stepper filament_buffer]
#step_pin: buffer_mcu: PA8           
#dir_pin: buffer_mcu: PA9           
#enable_pin: !buffer_mcu: PA11       
#microsteps: 16                      
#rotation_distance: 9.75               
#velocity: 150                        
#accel: 5000                         
#push_length: 25                  
#full_steps_per_rotation: 200   
#push_pin: ^buffer_mcu: PB11

#[tmc2209 buffer_stepper filament_buffer]
#uart_pin: buffer_mcu: PA12
#interpolate: True
#run_current: 0.9
#hold_current: 0.4
#sense_resistor: 0.150          
#uart_address: 3

[extruder_stepper support_extra_stepper]
extruder: extruder
step_pin: buffer_mcu: PA8           
dir_pin: buffer_mcu: PA9           
enable_pin: !buffer_mcu: PA11   
microsteps: 16                      
rotation_distance: 9.75                                                                             
full_steps_per_rotation: 200

[tmc2209 extruder_stepper support_extra_stepper]
uart_pin: buffer_mcu: PA12
interpolate: True
run_current: 0.9
hold_current: 0.4
sense_resistor: 0.150          
uart_address: 3

[gcode_macro RESET_VARIABLES_BUFFER_STEPPER]
gcode:
    FEEDER_RESET_VARIABLES
    SENSOR_RESET_VARIABLES

[gcode_macro INIT_CYCLIC_MACROS]
gcode:
  UPDATE_DELAYED_GCODE ID=CYCLIC_MACROS DURATION=1.0

[delayed_gcode CYCLIC_MACROS]
gcode:
    CYCLIC_SENSOR_BUTTON_CHECK
    CYCLIC_BUFFER_BUTTON_CHECK

    UPDATE_DELAYED_GCODE ID=CYCLIC_MACROS DURATION=0
    UPDATE_DELAYED_GCODE ID=CYCLIC_MACROS DURATION=1.0
    
######################################################################
###### Feeder region                              
######################################################################
[gcode_macro feeeder_variables]
variable_is_set_delta_change: False
variable_is_set_feeder_stepper_initial_pos: False

variable_default_rotation_distance: 9.75
variable_index_count: 0.0
variable_half_distance: 0.0
variable_last_length_value: 0.0
variable_copy_rotation_distance: 0.0

gcode:

[gcode_macro BUFFER_MOVE]
gcode:
    FORCE_MOVE STEPPER="extruder_stepper support_extra_stepper" DISTANCE={params.VALUE|float} VELOCITY=50 ACCEL=2000
    M400

######################################################################
###### Centering feeder procedure                               
######################################################################

[gcode_macro CENTER_EXTERNAL_FEEDER_CHECK_BUTTON_END]
gcode:
    {% if not printer["gcode_button stall_push_end"].state == "PRESSED" %}
        BUFFER_MOVE VALUE=1
    {% endif %}

[gcode_macro CENTER_EXTERNAL_FEEDER_CHECK_BUTTON_START]
gcode:
    {% if not printer["gcode_button stall_push_start"].state == "PRESSED" %}
        SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=index_count VALUE={ printer["gcode_macro feeeder_variables"].index_count + 1.0 }
        BUFFER_MOVE VALUE=-1
    {% endif %}

[gcode_macro CENTER_EXTERNAL_FEEDER_EVALUATE]
gcode:
    {% set local_halfdistance = 1.0 * (printer["gcode_macro feeeder_variables"].index_count / 2.0) %}
    
    {% if printer["gcode_macro feeeder_variables"].index_count < 2.0 %}
      RESPOND PREFIX="INFO" MSG="CENTER_EXTERNAL_FEEDER: Check if fillament is inside external feeder. Then manualy run CENTER_EXTERNAL_FEEDER Macro."
      PAUSE
    {% else %}
      SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=half_distance VALUE={ local_halfdistance }
        
       BUFFER_MOVE VALUE={ local_halfdistance }
      
      SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=is_set_feeder_stepper_initial_pos VALUE=True
      RESPOND PREFIX="INFO" MSG="CENTER_EXTERNAL_FEEDER: calibrated center of external feeder."
      RESPOND PREFIX="INFO" MSG="{ "Half distance " + local_halfdistance|string + "mm"}"
    {% endif %}
    SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=index_count VALUE=0.0

[gcode_macro CENTER_EXTERNAL_FEEDER] 
gcode:
    {% for x in range(0, 100): %} 
      CENTER_EXTERNAL_FEEDER_CHECK_BUTTON_END
    {% endfor %}

    {% for x in range(0, 100): %}
      CENTER_EXTERNAL_FEEDER_CHECK_BUTTON_START
    {% endfor %}

    CENTER_EXTERNAL_FEEDER_EVALUATE
######################################################################
######==========================================================######
######################################################################

######################################################################
###### Auto-calibration for feeeder rotation_distance                             
######################################################################
[gcode_macro FEEDER_RESET_VARIABLES]
gcode:
  SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=is_set_delta_change VALUE=False
  SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=is_set_feeder_stepper_initial_pos VALUE=False

  SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=copy_rotation_distance VALUE={printer["gcode_macro feeeder_variables"].default_rotation_distance}
  SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=index_count VALUE=0.0
  SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=half_distance VALUE=0.0
  SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=last_length_value VALUE=0.0

[gcode_macro DELTA_EVALUATE]
gcode:
    {% if printer["gcode_macro feeeder_variables"].is_set_delta_change == False %}
      SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=last_length_value VALUE={printer.print_stats.filament_used}
      SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=is_set_delta_change VALUE=True
    
      RESPOND PREFIX="INFO" MSG="{ "Initial rotation_distance for external buffer stepper:" + ('%0.2f'|format(printer["gcode_macro feeeder_variables"].default_rotation_distance))|string }"
      SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=copy_rotation_distance VALUE={printer["gcode_macro feeeder_variables"].default_rotation_distance}
      
    {% else %}
      {% set delta_length = printer.print_stats.filament_used - printer["gcode_macro feeeder_variables"].last_length_value %}
      SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=last_length_value VALUE={printer.print_stats.filament_used}
      
      {% if delta_length > 5.0 %} # if delta_length is less than 5mm something is wrong with fillament or buffer itself
        {% set delta_ratio =  delta_length / (delta_length + ( params.VALUE|float ) ) %} # +/-half_distance because delta length is what toolhead extruder used and external feeder used +/- around half_distance more  
        
        {% set local_copy_rotation_distance = printer["gcode_macro feeeder_variables"].copy_rotation_distance / delta_ratio %}

        {% if 0.75 < delta_ratio < 1.25  %} #if delta_ratio is not fit between those values, it is most likely due to huge error in rotation_distance calculation
        
          SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=is_set_delta_change VALUE=True
          
          SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER="support_extra_stepper" DISTANCE={local_copy_rotation_distance}
          SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=copy_rotation_distance VALUE={local_copy_rotation_distance}
          
          RESPOND PREFIX="INFO" MSG="{ "Delta recalculation after:" + ('%0.2f'|format(delta_length))|string + "mm of filament" }"
          RESPOND PREFIX="INFO" MSG="{ "New rotation_distance for external buffer stepper:" + ('%0.2f'|format(local_copy_rotation_distance))|string }"
          
        {% else %}
          PAUSE
          RESPOND PREFIX="INFO" MSG="there is possibility of wrong support stepper initial rotation_distance configuration. Check stepper docummentation and correct value with SET_BUFFER_DEFAULT_ROTATION_DISTANCE DISTANCE=[value in float]"
          RESPOND PREFIX="INFO" MSG="{ "Calculated rotation_distance for external buffer stepper is more/less than 1/4!!!:" + ('%0.2f'|format(local_copy_rotation_distance))|string }"
          RESPOND PREFIX="INFO" MSG="{ "Setting default rotation distance:" + ('%0.2f'|format(printer["gcode_macro feeeder_variables"].default_rotation_distance))|string }"

          SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER="support_extra_stepper" DISTANCE={printer["gcode_macro feeeder_variables"].default_rotation_distance}
          SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=copy_rotation_distance VALUE={printer["gcode_macro feeeder_variables"].default_rotation_distance}
          
          CENTER_EXTERNAL_FEEDER_EVALUATE
          RESUME
        {% endif %}
      {% else %}
      #
      {% endif %}
    {% endif %}

[gcode_macro SET_BUFFER_DEFAULT_ROTATION_DISTANCE]
gcode:
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER="support_extra_stepper" DISTANCE={params.DISTANCE|float}
    SET_GCODE_VARIABLE MACRO=feeeder_variables VARIABLE=copy_rotation_distance VALUE={params.DISTANCE|float}

[gcode_macro CYCLIC_BUFFER_BUTTON_CHECK]
gcode:
  {% if printer["gcode_button stall_push_end"].state == "PRESSED" %}
    {% if printer["print_stats"].state == "printing" and printer["gcode_macro feeeder_variables"].is_set_feeder_stepper_initial_pos and printer["gcode_macro sensor_variables"].is_filament_detected %}
      G10
      DELTA_EVALUATE VALUE={printer["gcode_macro feeeder_variables"].half_distance}
      BUFFER_MOVE VALUE={ printer["gcode_macro feeeder_variables"].half_distance *-1} #this moves filament tensioner around center of sensor
      G11
    {% endif %}
  {% elif printer["gcode_button stall_push_start"].state == "PRESSED" %}
      {% if printer["print_stats"].state == "printing" and printer["gcode_macro feeeder_variables"].is_set_feeder_stepper_initial_pos and printer["gcode_macro sensor_variables"].is_filament_detected %}
        G10
        DELTA_EVALUATE VALUE={printer["gcode_macro feeeder_variables"].half_distance * -1}
        BUFFER_MOVE VALUE={ printer["gcode_macro feeeder_variables"].half_distance} #this moves filament tensioner around center of sensor
        G11
  {% endif %}
  
[gcode_button stall_push_end] #Buffer PTFE Button
pin: ^buffer_mcu: PB10
press_gcode:
release_gcode:

[gcode_button stall_push_start] #Buffer PTFE Button
pin: ^buffer_mcu: PB11
press_gcode:
release_gcode:
 
######################################################################
######==========================================================######
######################################################################

######################################################################
###### Filament sensor                             
######################################################################
[gcode_macro sensor_variables]
variable_is_reference_point_set: False
variable_is_filament_detected: False

variable_inertia_length: 100.0
variable_filament_length_ptfe: 1300.0 #this is length between toolehad extruder and buffer
variable_filament_length_reference_point: 0.0

gcode:

[gcode_button filament_sensor]
pin: ^buffer_mcu: PA10
press_gcode:
release_gcode:

[output_pin red_led]
pin: !buffer_mcu: PC14
value: 0

[output_pin blue_led]
pin: !buffer_mcu: PC15
value: 0

[output_pin green_led]
pin: !buffer_mcu: PB1  
value: 0    

[gcode_macro SENSOR_RESET_VARIABLES]
gcode:
    SET_GCODE_VARIABLE MACRO=sensor_variables VARIABLE=is_reference_point_set VALUE=False
    SET_GCODE_VARIABLE MACRO=sensor_variables VARIABLE=is_filament_detected VALUE=False
    
    SET_GCODE_VARIABLE MACRO=sensor_variables VARIABLE=filament_length_reference_point VALUE=0.0

[gcode_macro CYCLIC_SENSOR_BUTTON_CHECK]
gcode:
  {% if printer["gcode_button filament_sensor"].state == "PRESSED" %}
      SET_GCODE_VARIABLE MACRO=sensor_variables VARIABLE=is_filament_detected VALUE=True

      SET_PIN PIN=red_led VALUE=0
      SET_PIN PIN=green_led VALUE=1
      
  {% else %}
      SET_GCODE_VARIABLE MACRO=sensor_variables VARIABLE=is_filament_detected VALUE=False

      SET_PIN PIN=green_led VALUE=0
      SET_PIN PIN=red_led VALUE=1
        {% if printer["print_stats"].state == "printing" %}
            {% set adjustedFilamentLengthPtfe = printer["gcode_macro sensor_variables"].filament_length_ptfe - printer["gcode_macro sensor_variables"].inertia_length %}
            
            {% if not printer["gcode_macro sensor_variables"].is_reference_point_set %}
                SET_GCODE_VARIABLE MACRO=sensor_variables VARIABLE=filament_length_reference_point VALUE={ printer.print_stats.filament_used }
                SET_GCODE_VARIABLE MACRO=sensor_variables VARIABLE=is_reference_point_set VALUE=True
                
                RESPOND PREFIX="INFO" MSG="{ "Lack of filament in buffer. Going to PAUSE after: " + ('%0.2f'|format(adjustedFilamentLengthPtfe))|string + "mm of filament." }"
            {% else %}
                {% set usedAfter = printer.print_stats.filament_used - printer["gcode_macro sensor_variables"].filament_length_reference_point%}
                
                {% if usedAfter > adjustedFilamentLengthPtfe %}
                    RESPOND PREFIX="INFO" MSG="Filament runout."
                    PAUSE
                {% else %}
                     RESPOND PREFIX="INFO" MSG="{ "Lack of filament in buffer. Going to PAUSE after: " + ('%0.2f'|format(adjustedFilamentLengthPtfe - usedAfter))|string + "mm of filament." }"
                {% endif %}
            {% endif %}
        {% endif %}
  {% endif %}
  
######################################################################
######==========================================================######
######################################################################

######################################################################
######==========================================================######
######################################################################